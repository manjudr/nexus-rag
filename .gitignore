# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be added to the global gitignore or merged into this project gitignore.  For a PyCharm
#  project, it is not recommended to check the version control system, for the following reasons:
#  * The IntelliJ platform stores project files in a binary format that is not suitable for VCS.
#  * A PyCharm project represents a Python environment configuration, which may not be applicable
#    to other machines or users.
#  * The PyCharm project configuration can be regenerated based on the project's Python code.
.idea/

# VS Code
.vscode/
*.code-workspace

# Local History for Visual Studio Code
.history/

# Windows thumbnail cache files
Thumbs.db
Thumbs.db:encryptable
ehthumbs.db
ehthumbs_vista.db

# Dump file
*.stackdump

# Folder config file
[Dd]esktop.ini

# Recycle Bin used on file shares
$RECYCLE.BIN/

# Windows Installer files
*.cab
*.msi
*.msix
*.msm
*.msp

# Windows shortcuts
*.lnk

# macOS
.DS_Store
.AppleDouble
.LSOverride

# Icon must end with two \r
Icon

# Thumbnails
._*

# Files that might appear in the root of a volume
.DocumentRevisions-V100
.fseventsd
.Spotlight-V100
.TemporaryItems
.Trashes
.VolumeIcon.icns
.com.apple.timemachine.donotpresent

# Directories potentially created on remote AFP share
.AppleDB
.AppleDesktop
Network Trash Folder
Temporary Items
.apdisk

# ============================================================================
# PROJECT SPECIFIC IGNORES
# ============================================================================

# Vector Database Files
*.db
*.sqlite
*.sqlite3
milvus_demo.db
vector_db_data/
milvus_data/

# AI/ML Model Files
*.bin
*.pt
*.pth
*.onnx
*.pb
*.h5
*.pkl
*.joblib
*.model
models_cache/
model_downloads/
transformers_cache/

# Hugging Face Cache
.cache/
huggingface/

# Sentence Transformers Cache
sentence_transformers/

# Large Data Files
*.zip
*.tar.gz
*.rar
*.7z

# Embeddings and Vector Files
embeddings/
vectors/
*.npy
*.npz
*.h5
*.hdf5

# Configuration Files with Secrets
config_local.py
.env.local
.env.production
secrets.json
api_keys.json

# Log Files
logs/
*.log
app.log
debug.log
error.log

# Temporary Files
temp/
tmp/
temporary/
*.tmp
*.temp

# Large PDF Files (uncomment if you want to exclude large PDFs)
# *.pdf

# Data Processing Outputs
outputs/
results/
processed_data/

# Jupyter Notebook Checkpoints
.ipynb_checkpoints/

# Pytest
.pytest_cache/

# Coverage Reports
htmlcov/
.coverage

# Virtual Environment (additional patterns)
venv*/
.env*/

# IDE Files
*.swp
*.swo
*~

# Backup Files
*.bak
*.backup
*.orig

# OS Generated Files
.directory
.fuse_hidden*
.nfs*

# ============================================================================
# KEEP THESE FILES (DO NOT IGNORE)
# ============================================================================

# Keep sample/demo data files
!data/educational_content/*.txt
!data/educational_content/metadata.json
!data/video_transcript.txt
!data/obsrv.pdf

# Keep configuration templates
!config.py

# Keep documentation
!docs/
!*.md
!README.md

# Keep requirements
!requirements.txt

# Keep schema files
!schemas/
